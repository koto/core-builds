//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"styling.js","sourceRoot":"","sources":["../../../../../../../../../../../packages/core/src/render3/interfaces/styling.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {StyleSanitizeFn} from '../../sanitization/style_sanitizer';\nimport {RElement} from '../interfaces/renderer';\nimport {LContainer} from './container';\nimport {PlayerContext} from './player';\nimport {LView} from './view';\n\n\n/**\n * The styling context acts as a styling manifest (shaped as an array) for determining which\n * styling properties have been assigned via the provided `updateStylingMap`, `updateStyleProp`\n * and `updateClassProp` functions. It also stores the static style/class values that were\n * extracted from the template by the compiler.\n *\n * A context is created by Angular when:\n * 1. An element contains static styling values (like style=\"...\" or class=\"...\")\n * 2. An element contains single property binding values (like [style.prop]=\"x\" or\n * [class.prop]=\"y\")\n * 3. An element contains multi property binding values (like [style]=\"x\" or [class]=\"y\")\n * 4. A directive contains host bindings for static, single or multi styling properties/bindings.\n * 5. An animation player is added to an element via `addPlayer`\n *\n * Note that even if an element contains static styling then this context will be created and\n * attached to it. The reason why this happens (instead of treating styles/classes as regular\n * HTML attributes) is because the style/class bindings must be able to default themselves back\n * to their respective static values when they are set to null.\n *\n * Say for example we have this:\n * ```\n * <!-- when `myWidthExp=null` then a width of `100px`\n *      will be used a default value for width -->\n * <div style=\"width:100px\" [style.width]=\"myWidthExp\"></div>\n * ```\n *\n * Even in the situation where there are no bindings, the static styling is still placed into the\n * context because there may be another directive on the same element that has styling.\n *\n * When Angular initializes styling data for an element then it will first register the static\n * styling values on the element using one of these two instructions:\n *\n * 1. elementStart or element (within the template function of a component)\n * 2. elementHostAttrs (for directive host bindings)\n *\n * In either case, a styling context will be created and stored within an element's `LViewData`.\n * Once the styling context is created then single and multi properties can be stored within it.\n * For this to happen, the following function needs to be called:\n *\n * `elementStyling` (called with style properties, class properties and a sanitizer + a directive\n * instance).\n *\n * When this instruction is called it will populate the styling context with the provided style\n * and class names into the context.\n *\n * The context itself looks like this:\n *\n * context = [\n *   // 0-8: header values (about 8 entries of configuration data)\n *   // 9+: this is where each entry is stored:\n * ]\n *\n * Let's say we have the following template code:\n *\n * ```\n * <div class=\"foo bar\"\n *      style=\"width:200px; color:red\"\n *      [style.width]=\"myWidthExp\"\n *      [style.height]=\"myHeightExp\"\n *      [class.baz]=\"myBazExp\">\n * ```\n *\n * The context generated from these values will look like this (note that\n * for each binding name (the class and style bindings) the values will\n * be inserted twice into the array (once for single property entries and\n * again for multi property entries).\n *\n * context = [\n *   // 0-8: header values (about 8 entries of configuration data)\n *   // 9+: this is where each entry is stored:\n *\n *   // SINGLE PROPERTIES\n *   configForWidth,\n *   'width'\n *   myWidthExp, // the binding value not the binding itself\n *   0, // the directive owner\n *\n *   configForHeight,\n *   'height'\n *   myHeightExp, // the binding value not the binding itself\n *   0, // the directive owner\n *\n *   configForBazClass,\n *   'baz\n *   myBazClassExp, // the binding value not the binding itself\n *   0, // the directive owner\n *\n *   // MULTI PROPERTIES\n *   configForWidth,\n *   'width'\n *   myWidthExp, // the binding value not the binding itself\n *   0, // the directive owner\n *\n *   configForHeight,\n *   'height'\n *   myHeightExp, // the binding value not the binding itself\n *   0, // the directive owner\n *\n *   configForBazClass,\n *   'baz\n *   myBazClassExp, // the binding value not the binding itself\n *   0, // the directive owner\n * ]\n *\n * The configuration values are left out of the example above because\n * the ordering of them could change between code patches. Please read the\n * documentation below to get a better understand of what the configuration\n * values are and how they work.\n *\n * Each time a binding property is updated (whether it be through a single\n * property instruction like `elementStyleProp`, `elementClassProp` or\n * `elementStylingMap`) then the values in the context will be updated as\n * well.\n *\n * If for example `[style.width]` updates to `555px` then its value will be reflected\n * in the context as so:\n *\n * context = [\n *   // ...\n *   configForWidth, // this will be marked DIRTY\n *   'width'\n *   '555px',\n *   0,\n *   //..\n * ]\n *\n * The context and directive data will also be marked dirty.\n *\n * Despite the context being updated, nothing has been rendered on screen (not styles or\n * classes have been set on the element). To kick off rendering for an element the following\n * function needs to be run `elementStylingApply`.\n *\n * `elementStylingApply` will run through the context and find each dirty value and render them onto\n * the element. Once complete, all styles/classes will be set to clean. Because of this, the render\n * function will now know not to rerun itself again if called again unless new style/class values\n * have changed.\n *\n * ## Directives\n * Directive style/class values (which are provided through host bindings) are also supported and\n * housed within the same styling context as are template-level style/class properties/bindings\n * So long as they are all assigned to the same element, both directive-level and template-level\n * styling bindings share the same context.\n *\n * Each of the following instructions supports accepting a directive instance as an input parameter:\n *\n * - `elementHostAttrs`\n * - `elementStyling`\n * - `elementStyleProp`\n * - `elementClassProp`\n * - `elementStylingMap`\n * - `elementStylingApply`\n *\n * Each time a directive value is passed in, it will be converted into an index by examining the\n * directive registry (which lives in the context configuration area). The index is then used\n * to help single style properties figure out where a value is located in the context.\n *\n *\n * ## Single-level styling bindings (`[style.prop]` and `[class.name]`)\n *\n * Both `[style.prop]` and `[class.name]` bindings are run through the `updateStyleProp`\n * and `updateClassProp` functions respectively. They work by examining the provided\n * `offset` value and are able to locate the exact spot in the context where the\n * matching style is located.\n *\n * Both `[style.prop]` and `[class.name]` bindings are able to process these values\n * from directive host bindings. When evaluated (from the host binding function) the\n * `directiveRef` value is then passed in.\n *\n * If two directives or a directive + a template binding both write to the same style/class\n * binding then the styling context code will decide which one wins based on the following\n * rule:\n *\n * 1. If the template binding has a value then it always wins\n * 2. Otherwise whichever first-registered directive that has that value first will win\n *\n * The code example helps make this clear:\n *\n * ```\n * <!--\n * <div [style.width]=\"myWidth\"\n *      [my-width-directive]=\"'600px'\">\n * -->\n *\n * @Directive({\n *  selector: '[my-width-directive']\n * })\n * class MyWidthDirective {\n *   @Input('my-width-directive')\n *   @HostBinding('style.width')\n *   public width = null;\n * }\n * ```\n *\n * Since there is a style binding for width present on the element (`[style.width]`) then\n * it will always win over the width binding that is present as a host binding within\n * the `MyWidthDirective`. However, if `[style.width]` renders as `null` (so `myWidth=null`)\n * then the `MyWidthDirective` will be able to write to the `width` style within the context.\n * Simply put, whichever directive writes to a value first ends up having ownership of it as\n * long as the template didn't set anything.\n *\n * The way in which the ownership is facilitated is through index value. The earliest directives\n * get the smallest index values (with 0 being reserved for the template element bindings). Each\n * time a value is written from a directive or the template bindings, the value itself gets\n * assigned the directive index value in its data. If another directive writes a value again then\n * its directive index gets compared against the directive index that exists on the element. Only\n * when the new value's directive index is less than the existing directive index then the new\n * value will be written to the context. But, if the existing value is null then the new value is\n * written by the less important directive.\n *\n * Each directive also has its own sanitizer and dirty flags. These values are consumed within the\n * rendering function.\n *\n *\n * ## Multi-level styling bindings (`[style]` and `[class]`)\n *\n * Multi-level styling bindings are treated as less important (less specific) as single-level\n * bindings (things like `[style.prop]` and `[class.name]`).\n *\n * Multi-level bindings are still applied to the context in a similar way as are single level\n * bindings, but this process works by diffing the new multi-level values (which are key/value\n * maps) against the existing set of styles that live in the context. Each time a new map value\n * is detected (via identity check) then it will loop through the values and figure out what\n * has changed and reorder the context array to match the ordering of the keys. This reordering\n * of the context makes sure that follow-up traversals of the context when updated against the\n * key/value map are as close as possible to o(n) (where \"n\" is the size of the key/value map).\n *\n * If a `directiveRef` value is passed in then the styling algorithm code will take the directive's\n * prioritization index into account and update the values with respect to more important\n * directives. This means that if a value such as `width` is updated in two different `[style]`\n * bindings (say one on the template and another within a directive that sits on the same element)\n * then the algorithm will decide how to update the value based on the following heuristic:\n *\n * 1. If the template binding has a value then it always wins\n * 2. If not then whichever first-registered directive that has that value first will win\n *\n * It will also update the value if it was set to `null` by a previous directive (or the template).\n *\n * Each time a value is updated (or removed) then the context will change shape to better match\n * the ordering of the styling data as well as the ordering of each directive that contains styling\n * data. (See `patchStylingMapIntoContext` inside of class_and_style_bindings.ts to better\n * understand how this works.)\n *\n * ## Rendering\n * The rendering mechanism (when the styling data is applied on screen) occurs via the\n * `elementStylingApply` function and is designed to run after **all** styling functions have been\n * evaluated. The rendering algorithm will loop over the context and only apply the styles that are\n * flagged as dirty (either because they are new, updated or have been removed via multi or\n * single bindings).\n */\nexport interface StylingContext extends\n    Array<{[key: string]: any}|number|string|boolean|RElement|StyleSanitizeFn|PlayerContext|null> {\n  /**\n   * Location of element that is used as a target for this context.\n   */\n  [StylingIndex.ElementPosition]: LContainer|LView|RElement|null;\n\n  /**\n   * A numeric value representing the configuration status (whether the context is dirty or not)\n   * mixed together (using bit shifting) with a index value which tells the starting index value\n   * of where the multi style entries begin.\n   */\n  [StylingIndex.MasterFlagPosition]: number;\n\n  /**\n   * Location of the collection of directives for this context\n   */\n  [StylingIndex.DirectiveRegistryPosition]: DirectiveRegistryValues;\n\n  /**\n   * Location of all static styles values\n   */\n  [StylingIndex.InitialStyleValuesPosition]: InitialStylingValues;\n\n  /**\n   * Location of all static class values\n   */\n  [StylingIndex.InitialClassValuesPosition]: InitialStylingValues;\n\n  /**\n   * A numeric value representing the class index offset value. Whenever a single class is\n   * applied (using `elementClassProp`) it should have an styling index value that doesn't\n   * need to take into account any style values that exist in the context.\n   */\n  [StylingIndex.SinglePropOffsetPositions]: SinglePropOffsetValues;\n\n  /**\n   * The last class value that was interpreted by elementStylingMap. This is cached\n   * So that the algorithm can exit early incase the value has not changed.\n   */\n  [StylingIndex.CachedMultiClasses]: any|MapBasedOffsetValues;\n\n  /**\n   * The last style value that was interpreted by elementStylingMap. This is cached\n   * So that the algorithm can exit early incase the value has not changed.\n   */\n  [StylingIndex.CachedMultiStyles]: any|MapBasedOffsetValues;\n\n  /**\n   * Location of animation context (which contains the active players) for this element styling\n   * context.\n   */\n  [StylingIndex.PlayerContext]: PlayerContext|null;\n}\n\n/**\n * Used as a styling array to house static class and style values that were extracted\n * by the compiler and placed in the animation context via `elementStart` and\n * `elementHostAttrs`.\n *\n * See [InitialStylingValuesIndex] for a breakdown of how all this works.\n */\nexport interface InitialStylingValues extends Array<string|boolean|number|null> {\n  [InitialStylingValuesIndex.DefaultNullValuePosition]: null;\n  [InitialStylingValuesIndex.CachedStringValuePosition]: string|null;\n}\n\n/**\n * Used as an offset/position index to figure out where initial styling\n * values are located.\n *\n * Used as a reference point to provide markers to all static styling\n * values (the initial style and class values on an element) within an\n * array within the `StylingContext`. This array contains key/value pairs\n * where the key is the style property name or className and the value is\n * the style value or whether or not a class is present on the elment.\n *\n * The first value is always null so that a initial index value of\n * `0` will always point to a null value.\n *\n * The second value is also always null unless a string-based representation\n * of the styling data was constructed (it gets cached in this slot).\n *\n * If a <div> elements contains a list of static styling values like so:\n *\n * <div class=\"foo bar baz\" style=\"width:100px; height:200px;\">\n *\n * Then the initial styles for that will look like so:\n *\n * Styles:\n * ```\n * StylingContext[InitialStylesIndex] = [\n *   null, null, 'width', '100px', height, '200px'\n * ]\n * ```\n *\n * Classes:\n * ```\n * StylingContext[InitialClassesIndex] = [\n *   null, null, 'foo', true, 'bar', true, 'baz', true\n * ]\n * ```\n *\n * Initial style and class entries have their own arrays. This is because\n * it's easier to add to the end of one array and not then have to update\n * every context entries' pointer index to the newly offseted values.\n *\n * When property bindinds are added to a context then initial style/class\n * values will also be inserted into the array. This is to create a space\n * in the situation when a follow-up directive inserts static styling into\n * the array. By default, style values are `null` and class values are\n * `false` when inserted by property bindings.\n *\n * For example:\n * ```\n * <div class=\"foo bar baz\"\n *      [class.car]=\"myCarExp\"\n *      style=\"width:100px; height:200px;\"\n *      [style.opacity]=\"myOpacityExp\">\n * ```\n *\n * Will construct initial styling values that look like:\n *\n * Styles:\n * ```\n * StylingContext[InitialStylesIndex] = [\n *   null, null, 'width', '100px', height, '200px', 'opacity', null\n * ]\n * ```\n *\n * Classes:\n * ```\n * StylingContext[InitialClassesIndex] = [\n *   null, null, 'foo', true, 'bar', true, 'baz', true, 'car', false\n * ]\n * ```\n *\n * Now if a directive comes along and introduces `car` as a static\n * class value or `opacity` then those values will be filled into\n * the initial styles array.\n *\n * For example:\n *\n * ```\n * @Directive({\n *   selector: 'opacity-car-directive',\n *   host: {\n *     'style': 'opacity:0.5',\n *     'class': 'car'\n *   }\n * })\n * class OpacityCarDirective {}\n * ```\n *\n * This will render itself as:\n *\n * Styles:\n * ```\n * StylingContext[InitialStylesIndex] = [\n *   null, null, 'width', '100px', height, '200px', 'opacity', '0.5'\n * ]\n * ```\n *\n * Classes:\n * ```\n * StylingContext[InitialClassesIndex] = [\n *   null, null, 'foo', true, 'bar', true, 'baz', true, 'car', true\n * ]\n * ```\n */\nexport const enum InitialStylingValuesIndex {\n  /**\n   * The first value is always `null` so that `styles[0] == null` for unassigned values\n   */\n  DefaultNullValuePosition = 0,\n\n  /**\n   * Used for non-styling code to examine what the style or className string is:\n   * styles: ['width', '100px', 0, 'opacity', null, 0, 'height', '200px', 0]\n   *    => initialStyles[CachedStringValuePosition] = 'width:100px;height:200px';\n   * classes: ['foo', true, 0, 'bar', false, 0, 'baz', true, 0]\n   *    => initialClasses[CachedStringValuePosition] = 'foo bar';\n   *\n   * Note that this value is `null` by default and it will only be populated\n   * once `getInitialStyleStringValue` or `getInitialClassNameValue` is executed.\n   */\n  CachedStringValuePosition = 1,\n\n  /**\n   * Where the style or class values start in the tuple\n   */\n  KeyValueStartPosition = 2,\n\n  /**\n   * The offset value (index + offset) for the property value for each style/class entry\n   */\n  PropOffset = 0,\n\n  /**\n   * The offset value (index + offset) for the style/class value for each style/class entry\n   */\n  ValueOffset = 1,\n\n  /**\n   * The offset value (index + offset) for the style/class directive owner for each style/class\n     entry\n   */\n  DirectiveOwnerOffset = 2,\n\n  /**\n   * The first bit set aside to mark if the initial style was already rendere\n   */\n  AppliedFlagBitPosition = 0b0,\n  AppliedFlagBitLength = 1,\n\n  /**\n   * The total size for each style/class entry (prop + value + directiveOwner)\n   */\n  Size = 3\n}\n\n/**\n * An array located in the StylingContext that houses all directive instances and additional\n * data about them.\n *\n * Each entry in this array represents a source of where style/class binding values could\n * come from. By default, there is always at least one directive here with a null value and\n * that represents bindings that live directly on an element in the template (not host bindings).\n *\n * Each successive entry in the array is an actual instance of a directive as well as some\n * additional info about that entry.\n *\n * An entry within this array has the following values:\n * [0] = The instance of the directive (the first entry is null because its reserved for the\n *       template)\n * [1] = The pointer that tells where the single styling (stuff like [class.foo] and [style.prop])\n *       offset values are located. This value will allow for a binding instruction to find exactly\n *       where a style is located.\n * [2] = Whether or not the directive has any styling values that are dirty. This is used as\n *       reference within the `renderStyling` function to decide whether to skip iterating\n *       through the context when rendering is executed.\n * [3] = The styleSanitizer instance that is assigned to the directive. Although it's unlikely,\n *       a directive could introduce its own special style sanitizer and for this reach each\n *       directive will get its own space for it (if null then the very first sanitizer is used).\n *\n * Each time a new directive is added it will insert these four values at the end of the array.\n * When this array is examined then the resulting directiveIndex will be resolved by dividing the\n * index value by the size of the array entries (so if DirA is at spot 8 then its index will be 2).\n */\nexport interface DirectiveRegistryValues extends Array<null|{}|boolean|number|StyleSanitizeFn> {\n  [DirectiveRegistryValuesIndex.DirectiveValueOffset]: null;\n  [DirectiveRegistryValuesIndex.SinglePropValuesIndexOffset]: number;\n  [DirectiveRegistryValuesIndex.DirtyFlagOffset]: boolean;\n  [DirectiveRegistryValuesIndex.StyleSanitizerOffset]: StyleSanitizeFn|null;\n}\n\n/**\n * An enum that outlines the offset/position values for each directive entry and its data\n * that are housed inside of [DirectiveRegistryValues].\n */\nexport const enum DirectiveRegistryValuesIndex {\n  DirectiveValueOffset = 0,\n  SinglePropValuesIndexOffset = 1,\n  DirtyFlagOffset = 2,\n  StyleSanitizerOffset = 3,\n  Size = 4\n}\n\n/**\n * An array that contains the index pointer values for every single styling property\n * that exists in the context and for every directive. It also contains the total\n * single styles and single classes that exists in the context as the first two values.\n *\n * Let's say we have the following template code:\n *\n * <div [style.width]=\"myWidth\"\n *      [style.height]=\"myHeight\"\n *      [class.flipped]=\"flipClass\"\n *      directive-with-opacity>\n *      directive-with-foo-bar-classes>\n *\n * We have two directive and template-binding sources,\n * 2 + 1 styles and 1 + 1 classes. When the bindings are\n * registered the SinglePropOffsets array will look like so:\n *\n * s_0/c_0 = template directive value\n * s_1/c_1 = directive one (directive-with-opacity)\n * s_2/c_2 = directive two (directive-with-foo-bar-classes)\n *\n * [3, 2, 2, 1, s_00, s01, c_01, 1, 0, s_10, 0, 1, c_20\n */\nexport interface SinglePropOffsetValues extends Array<number> {\n  [SinglePropOffsetValuesIndex.StylesCountPosition]: number;\n  [SinglePropOffsetValuesIndex.ClassesCountPosition]: number;\n}\n\n/**\n * An enum that outlines the offset/position values for each single prop/class entry\n * that are housed inside of [SinglePropOffsetValues].\n */\nexport const enum SinglePropOffsetValuesIndex {\n  StylesCountPosition = 0,\n  ClassesCountPosition = 1,\n  ValueStartPosition = 2\n}\n\n/**\n * Used a reference for all multi styling values (values that are assigned via the\n * `[style]` and `[class]` bindings).\n *\n * Single-styling properties (things set via `[style.prop]` and `[class.name]` bindings)\n * are not handled using the same approach as multi-styling bindings (such as `[style]`\n * `[class]` bindings).\n *\n * Multi-styling bindings rely on a diffing algorithm to figure out what properties have been added,\n * removed and modified. Multi-styling properties are also evaluated across directives--which means\n * that Angular supports having multiple directives all write to the same `[style]` and `[class]`\n * bindings (using host bindings) even if the `[style]` and/or `[class]` bindings are being written\n * to on the template element.\n *\n * All multi-styling values that are written to an element (whether it be from the template or any\n * directives attached to the element) are all written into the `MapBasedOffsetValues` array. (Note\n * that there are two arrays: one for styles and another for classes.)\n *\n * This array is shaped in the following way:\n *\n * [0]  = The total amount of unique multi-style or multi-class entries that exist currently in the\n *        context.\n * [1+] = Contains an entry of four values ... Each entry is a value assigned by a\n * `[style]`/`[class]`\n *        binding (we call this a **source**).\n *\n *        An example entry looks like so (at a given `i` index):\n *        [i + 0] = Whether or not the value is dirty\n *\n *        [i + 1] = The index of where the map-based values\n *                  (for this **source**) start within the context\n *\n *        [i + 2] = The untouched, last set value of the binding\n *\n *        [i + 3] = The total amount of unqiue binding values that were\n *                  extracted and set into the context. (Note that this value does\n *                  not reflect the total amount of values within the binding\n *                  value (since it's a map), but instead reflects the total values\n *                  that were not used by another directive).\n *\n * Each time a directive (or template) writes a value to a `[class]`/`[style]` binding then the\n * styling diffing algorithm code will decide whether or not to update the value based on the\n * following rules:\n *\n * 1. If a more important directive (either the template or a directive that was registered\n *    beforehand) has written a specific styling value into the context then any follow-up styling\n *    values (set by another directive via its `[style]` and/or `[class]` host binding) will not be\n *    able to set it. This is because the former directive has priorty.\n * 2. Only if a former directive has set a specific styling value to null (whether by actually\n *    setting it to null or not including it in is map value) then a less imporatant directive can\n *    set its own value.\n *\n * ## How the map-based styling algorithm updates itself\n */\nexport interface MapBasedOffsetValues extends Array<any> {\n  [MapBasedOffsetValuesIndex.EntriesCountPosition]: number;\n}\n\nexport const enum MapBasedOffsetValuesIndex {\n  EntriesCountPosition = 0,\n  ValuesStartPosition = 1,\n  DirtyFlagOffset = 0,\n  PositionStartOffset = 1,\n  ValueOffset = 2,\n  ValueCountOffset = 3,\n  Size = 4\n}\n\n/**\n * Used to set the context to be dirty or not both on the master flag (position 1)\n * or for each single/multi property that exists in the context.\n */\nexport const enum StylingFlags {\n  // Implies no configurations\n  None = 0b00000,\n  // Whether or not the entry or context itself is dirty\n  Dirty = 0b00001,\n  // Whether or not this is a class-based assignment\n  Class = 0b00010,\n  // Whether or not a sanitizer was applied to this property\n  Sanitize = 0b00100,\n  // Whether or not any player builders within need to produce new players\n  PlayerBuildersDirty = 0b01000,\n  // The max amount of bits used to represent these configuration values\n  BindingAllocationLocked = 0b10000,\n  BitCountSize = 5,\n  // There are only five bits here\n  BitMask = 0b11111\n}\n\n/** Used as numeric pointer values to determine what cells to update in the `StylingContext` */\nexport const enum StylingIndex {\n  // Position of where the initial styles are stored in the styling context\n  // This index must align with HOST, see interfaces/view.ts\n  ElementPosition = 0,\n  // Index of location where the start of single properties are stored. (`updateStyleProp`)\n  MasterFlagPosition = 1,\n  // Position of where the registered directives exist for this styling context\n  DirectiveRegistryPosition = 2,\n  // Position of where the initial styles are stored in the styling context\n  InitialStyleValuesPosition = 3,\n  InitialClassValuesPosition = 4,\n  // Index of location where the class index offset value is located\n  SinglePropOffsetPositions = 5,\n  // Position of where the last string-based CSS class value was stored (or a cached version of the\n  // initial styles when a [class] directive is present)\n  CachedMultiClasses = 6,\n  // Position of where the last string-based CSS class value was stored\n  CachedMultiStyles = 7,\n  // Multi and single entries are stored in `StylingContext` as: Flag; PropertyName;  PropertyValue\n  // Position of where the initial styles are stored in the styling context\n  PlayerContext = 8,\n  // Location of single (prop) value entries are stored within the context\n  SingleStylesStartPosition = 9,\n  FlagsOffset = 0,\n  PropertyOffset = 1,\n  ValueOffset = 2,\n  PlayerBuilderIndexOffset = 3,\n  // Size of each multi or single entry (flag + prop + value + playerBuilderIndex)\n  Size = 4,\n  // Each flag has a binary digit length of this value\n  BitCountSize = 14,  // (32 - 4) / 2 = ~14\n  // The binary digit value as a mask\n  BitMask = 0b11111111111111,  // 14 bits\n}\n\n/**\n * An enum that outlines the bit flag data for directive owner and player index\n * values that exist within en entry that lives in the StylingContext.\n *\n * The values here split a number value into two sets of bits:\n *  - The first 16 bits are used to store the directiveIndex that owns this style value\n *  - The other 16 bits are used to store the playerBuilderIndex that is attached to this style\n */\nexport const enum DirectiveOwnerAndPlayerBuilderIndex {\n  BitCountSize = 16,\n  BitMask = 0b1111111111111111\n}\n"]}